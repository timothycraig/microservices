version: "3.7"

services:
  traefik:
    image: traefik:v2.1
    networks:
      - proxy
    command:
      # Debugging
      # - --api.debug=true
      # - --log.level=DEBUG
      # Listen on http & https
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # Enable the docker provider & docker swarm mode
      - --providers.docker=true
      - --providers.docker.swarmmode=true
      # Attach to proxy overlay network
      - --providers.docker.network=proxy
      # Do not expose containers by default
      - --providers.docker.exposedbydefault=false
      # Enable the secure API
      - --api=true
      # TLS - Configure the tls letsencrypt challenge with our custom resolver
      # Replace with your letsencrypt email
      - --certificatesresolvers.leresolver.acme.email=tcraig@frameshift.io
      - --certificatesresolvers.leresolver.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.leresolver.acme.tlschallenge=true
      # Comment out this line after testing to use the production server and obtain a valid certificate
      - --certificatesresolvers.leresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        # Dashboard
        - "traefik.http.routers.traefik.rule=Host(`traefik.frameshift.io`)"
        - "traefik.http.services.traefik.loadbalancer.server.port=8080"
        - "traefik.http.routers.traefik.service=api@internal"
        - "traefik.http.routers.traefik.tls.certresolver=leresolver"
        - "traefik.http.routers.traefik.entrypoints=websecure"
        - "traefik.http.routers.traefik.middlewares=authtraefik"
        - "traefik.http.middlewares.authtraefik.basicauth.users=user:$$apr1$$q8eZFHjF$$Fvmkk//V6Btlaf2i/ju5n/" # user/password

        # Global redirect to https
        - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
        - "traefik.http.routers.http-catchall.entrypoints=web"
        - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"

        # Middleware redirect
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true"

  # my-app:
  #   image: containous/whoami:v1.3.0
  #   networks:
  #     - proxy
  #   deploy:
  #     replicas: 1
  #     labels:
  #       - "traefik.enable=true"
  #       - "traefik.http.routers.my-app.rule=Host(`iobio.frameshift.io`)"
  #       - "traefik.http.routers.my-app.entrypoints=websecure"
  #       - "traefik.http.routers.my-app.tls=true"
  #       - "traefik.http.routers.my-app.tls.certresolver=leresolver"
  #       - "traefik.http.services.my-app.loadbalancer.server.port=80"

  client:
    image: ttcraig/client:latest
    networks:
      - proxy
      - backend
    deploy:
      replicas: 1
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.client.rule=Host(`iobio.frameshift.io`)"
        - "traefik.http.routers.client.entrypoints=websecure"
        - "traefik.http.routers.client.tls=true"
        - "traefik.http.routers.client.tls.certresolver=leresolver"
        - "traefik.http.services.client.loadbalancer.server.port=80"

  backend:
    image: ttcraig/backend:latest
    networks:
      - backend
    deploy:
      replicas: 3
      labels:
        - "traefik.http.routers.backend.rule=Host(`iobio.frameshift.io`) && PathPrefix(`/api/`)"
        - "traefik.http.routers.backend.entrypoints=websecure"
        - "traefik.http.routers.backend.tls=true"
        - "traefik.http.routers.backend.tls.certresolver=leresolver"
        - "traefik.http.routers.backend.middlewares=stripapiprefix"
        - "traefik.http.middlewares.stripapiprefix.stripprefix.prefixes=/api"
        - "traefik.http.services.backend.loadbalancer.server.port=5000"

networks:
  proxy:
    driver: overlay
    name: proxy
  backend:
    driver: overlay
    name: backend

# Prerequisites - Must complete before launching stack

# 1. Replace email in config above to a valid email
# 2. Replace example domains
# 3. Create & encrypt traefik dashboard password

# Note: all dollar signs in the hash need to be doubled for escaping.
# To create user:password pair, it's possible to use this command:
# $ echo $(htpasswd -nb user password) | sed -e s/\\$/\\$\\$/g

# 4. Create file to hold letsencrypt certs

# $ cd docker
# $ mkdir letsencrypt
# $ touch letsencrypt/acme.json && chmod 600 letsencrypt/acme.json

# 5. Launch stack
# $ docker stack deploy -c docker/traefik-stack.yml traefik

# 6. Verify dashboard & TLS
# The certificate should be issued by: CN=Fake LE Intermediate X1
# Once everything is working, change to the Let's Encrypt production server: https://acme-v02.api.letsencrypt.org/directory

# Dashboard (https://localhost:8080)
# Route
# Basic auth (login: user | password: password)
# Let's Encrypt (https://traefik.frameshift.io/)
# Global HTTP to HTTPS redirection (http://traefik.frameshift.io/)
# Dashboard [api@internal]
# Dashboard [api@internal] + Basic auth (login: user | password: password)
# Dashboard [api@internal] + TLS (https://traefik.frameshift.io/)
